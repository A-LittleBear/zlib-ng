# Macros and other helper stuff offloaded from the main CMakeLists.txt file(s)
# in order to keep it (them) readable.

if(${INTRINSICS_TEST_TYPE} MATCHES "compiles")
    macro(check_intrinsics_availability source var)
        check_c_source_compiles("${source}" ${var})
    endmacro()
elseif(${INTRINSICS_TEST_TYPE} MATCHES "runs")
    include(CheckCSourceRuns)
    macro(check_intrinsics_availability source var)
        check_c_source_runs("${source}" ${var})
    endmacro()
elseif(${INTRINSICS_TEST_TYPE} MATCHES "accept")
    macro(check_intrinsics_availability source var)
        set(${var} 1)
        set(${var}_EXITCODE 0)
        message(STATUS "Test ${var} - Success (forced)")
    endmacro()
else()
    macro(check_intrinsics_availability source var)
        set(${var} 0)
        set(${var}_EXITCODE 1)
        message(STATUS "Test ${var} - Failed (forced)")
    endmacro()
endif()

macro(set_intrinsics_flags)
    if(${CMAKE_C_COMPILER} MATCHES "icc" OR ${CMAKE_C_COMPILER} MATCHES "icpc" OR ${CMAKE_C_COMPILER} MATCHES "icl")
        if(WITH_NATIVE_INSTRUCTIONS)
            message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not supported on this configuration")
        endif()
        if(CMAKE_HOST_UNIX)
            if(NOT SSE2FLAG)
                set(SSE2FLAG "-msse2")
            endif()
            if(NOT SSE4FLAG)
                set(SSE4FLAG "-msse4.2")
            endif()
        else()
            if(NOT SSE2FLAG)
                set(SSE2FLAG "/arch:SSE2")
            endif()
            if(NOT SSE4FLAG)
                set(SSE4FLAG "/arch:SSE4.2")
            endif()
        endif()
    elseif(MSVC)
        # TODO. ICC can be used through MSVC. I'm not sure if we'd ever see that combination
        # (who'd use cmake from an IDE...) but checking for ICC before checking for MSVC should
        # avoid mistakes.
        # /Oi ?
        set(SSE2FLAG "/arch:SSE2")
        if(WITH_NATIVE_INSTRUCTIONS)
            message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not supported on this configuration")
        endif()
    else()
        execute_process(COMMAND ${CMAKE_C_COMPILER} --version OUTPUT_VARIABLE COMPILER_VERSION)
        if("${COMPILER_VERSION}" MATCHES "gcc" OR "${COMPILER_VERSION}" MATCHES "clang")
            set(__GNUC__ ON)
        endif()
        if(WITH_NATIVE_INSTRUCTIONS)
            if(__GNUC__)
                set(NATIVEFLAG "-march=native")
            else()
                message(STATUS "Ignoring WITH_NATIVE_INSTRUCTIONS; not implemented yet on this configuration")
            endif()
        endif()
        if(NOT NATIVEFLAG)
            if(NOT SSE2FLAG)
                if(__GNUC__)
                    set(SSE2FLAG "-msse2")
                endif()
            endif()
            if(NOT SSE4FLAG)
                if(__GNUC__)
                    set(SSE4FLAG "-msse4")
                endif()
            endif()
            if(NOT PCLMULFLAG)
                if(__GNUC__)
                    set(PCLMULFLAG "-mpclmul")
                endif()
            endif()
        else(NOT NATIVEFLAG)
            set(SSE2FLAG ${NATIVEFLAG})
            set(SSE4FLAG ${NATIVEFLAG})
            set(PCLMULFLAG ${NATIVEFLAG})
        endif(NOT NATIVEFLAG)
    endif()
endmacro()

macro(set_required_intrinsics_flags flag)
    if(WITH_NATIVE_INSTRUCTIONS)
        set(CMAKE_REQUIRED_FLAGS "${NATIVEFLAG}")
    else()
        set(CMAKE_REQUIRED_FLAGS "${flag}")
    endif()
endmacro()

#
# macro to add either the given intrinsics option to the global compiler options,
# or ${NATIVEFLAG} (-march=native) if that is appropriate and possible. Should
# probably avoid adding the same option multiple times if add_compile_options doesn't
# already take care of that.
# An alternative version of this macro would take a file argument, and set ${flag}
# only for that file as opposed to ${NATIVEFLAG} globally, to limit side-effect of
# using ${flag} globally.
#
macro(add_intrinsics_option flag)
    if(WITH_NATIVE_INSTRUCTIONS AND NATIVEFLAG)
        add_compile_options(${NATIVEFLAG})
    else()
        add_compile_options(${flag})
    endif()
endmacro(add_intrinsics_option)

